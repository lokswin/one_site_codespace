name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Build Docker Compose services
      - name: Build Docker Compose services
        run: |
          docker-compose -f docker-compose.yml build --build-arg VNC_PASSWORD=${{ secrets.VNC_PASSWORD }}

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Start the Docker Compose services for testing
      - name: Start Docker Compose services
        run: |
          docker-compose -f docker-compose.yml up -d

      # Test the noVNC service by checking if it's accessible
      - name: Test noVNC service
        run: |
          sleep 5  # Wait for the services to start
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:6080)
          if [ "$response" -ne 200 ]; then
            echo "noVNC service is not accessible."
            exit 1
          fi

      # Clean up Docker Compose services
      - name: Clean up Docker Compose services
        run: |
          docker-compose -f docker-compose.yml down

  push:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Push the Docker Compose services to Docker Hub
      - name: Tag and Push Docker images to Docker Hub
        run: |
          docker-compose -f docker-compose.yml config | grep 'image:' | awk '{print $2}' | while read image; do
            docker tag "$image" "${{ secrets.DOCKER_USERNAME }}/$image:latest"
            docker push "${{ secrets.DOCKER_USERNAME }}/$image:latest"
          done

  deploy-codespace:
    needs: push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Codespace environment using devcontainer
      - name: Set up Codespace environment
        run: |
          echo "Starting Codespace deployment..."
          # Install the devcontainer CLI for managing the Codespace
          curl -fsSL https://code.visualstudio.com/docs/remote/devcontainer-cli-install | sh
          devcontainer up --workspace-folder ./.devcontainer

      # Verify that Codespace is up and running
      - name: Verify Codespace deployment
        run: |
          echo "Verifying Codespace environment..."
          devcontainer exec --workspace-folder ./.devcontainer --command "echo 'Codespace environment is running successfully.'"

      # Optionally commit any environment changes back to the repository
      - name: Commit environment changes
        if: success()
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .devcontainer/*
          git commit -m "Update devcontainer configuration"
          git push
